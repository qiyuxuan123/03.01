/// <reference types="wechat-miniprogram" />
export interface ResponseResultData<T = any> {
    [key: string]: any;
    data: T;
}
declare type Method = WechatMiniprogram.RequestOption['method'] | 'UPLOAD';
declare type Options = WechatMiniprogram.RequestOption | (WechatMiniprogram.UploadFileOption & {
    method: Method;
});
declare type RequestData = WechatMiniprogram.RequestOption['data'];
declare type RequestConfig = Omit<WechatMiniprogram.RequestOption, 'url' | 'method' | 'data' | 'success' | 'fail' | 'complete'>;
declare type UploadData = Pick<WechatMiniprogram.UploadFileOption, 'name' | 'filePath' | 'formData'>;
declare type UploadConfig = Omit<WechatMiniprogram.UploadFileOption, 'url' | 'name' | 'filePath' | 'formData' | 'success' | 'fail' | 'complete'>;
interface Http {
    <T = ResponseResultData>(options: Options): Promise<T>;
    /**
     * 配置接口基础路径
     */
    baseURL?: string;
    /**
     * 请求状态配置，同wx.showLoading
     */
    loading: WechatMiniprogram.ShowLoadingOption;
    intercept: {
        request(options: Options): Options;
        response(result: (WechatMiniprogram.RequestSuccessCallbackResult & {
            config: Options;
        }) | (WechatMiniprogram.UploadFileSuccessCallbackResult & {
            config: Options;
        })): any;
    };
    /**
     * GET 方法请求
     */
    get<T = any>(url: string, data?: RequestData, config?: RequestConfig): Promise<ResponseResultData<T>>;
    /**
     * POST 方法请求
     */
    post<T = any>(url: string, data?: RequestData, config?: RequestConfig): Promise<ResponseResultData<T>>;
    /**
     * PUT 方法请求
     */
    put<T = any>(url: string, data?: RequestData, config?: RequestConfig): Promise<ResponseResultData<T>>;
    /**
     * DELETE 方法请求
     */
    delete<T = any>(url: string, data?: RequestData, config?: RequestConfig): Promise<ResponseResultData<T>>;
    /**
     * wx.uploadFile 上传文件
     */
    upload<T = any>(url: string, data: UploadData, config?: UploadConfig): Promise<ResponseResultData<T>>;
}
declare function createHttp(config?: {
    showLoading: boolean;
}): Http;
declare const http: Http;
export type { Http };
export { http as default, createHttp };
